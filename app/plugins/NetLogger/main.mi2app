#!/usr/bin/python
# Filename: main.mi2app

"""
Cellular event logging main app

Author: Zengwen Yuan
"""

import os
import sys
import shutil
import traceback

from service import mi2app_utils
from mobile_insight.monitor import OnlineMonitor
from logging_analyzer import LoggingAnalyzer

cfg_file = "netlogger.cfg"

lte_lvl1 = [
    'LTE_RRC_OTA_Packet',
    'LTE_RRC_Serv_Cell_Info',
    'LTE_RRC_MIB_Packet',
    'LTE_RRC_MIB_Message_Log_Packet',
    'LTE_NAS_ESM_State',
    'LTE_NAS_ESM_OTA_Incoming_Packet',
    'LTE_NAS_ESM_OTA_Outgoing_Packet',
    'LTE_NAS_EMM_State',
    'LTE_NAS_EMM_OTA_Incoming_Packet',
    'LTE_NAS_EMM_OTA_Outgoing_Packet',
]
lte_lvl2 = [
    'LTE_RLC_UL_Config_Log_Packet',
    'LTE_RLC_DL_Config_Log_Packet',
    'LTE_RLC_UL_AM_All_PDU',
    'LTE_RLC_DL_AM_All_PDU',
    'LTE_MAC_UL_Transport_Block',
    'LTE_MAC_DL_Transport_Block',
]
lte_lvl3 = [
    'LTE_PHY_PDSCH_Packet',
    # 'LTE_PHY_Serv_Cell_Measurement',
    'LTE_PHY_Connected_Mode_Intra_Freq_Meas',
    'LTE_PHY_Connected_Mode_Neighbor_Measurement',
    'LTE_PHY_Inter_RAT_Measurement'
]
wcdma = [
    'WCDMA_RRC_OTA_Packet',
    'WCDMA_RRC_Serv_Cell_Info',
]
umts = [
    'UMTS_NAS_OTA_Packet',
    'UMTS_NAS_GMM_State',
    'UMTS_NAS_MM_State',
    'UMTS_NAS_MM_REG_State',
]

try:
    src = OnlineMonitor()
    src.set_skip_decoding(False)
    log_dir = os.path.join(mi2app_utils.get_cache_dir(), "mi2log")
    src.set_log_directory(log_dir)
    src.set_log_cut_size(float(plugin_config['mi_log_size']) / 1000.0)

    if plugin_config["log_type"] == "LTE Control Plane":
        src.enable_log(lte_lvl1)
    elif plugin_config["log_type"] == "LTE PHY":
        src.enable_log(lte_lvl3)
    elif plugin_config["log_type"] == "LTE Control/Data Plane":
        src.enable_log(lte_lvl1 + lte_lvl2)
    elif plugin_config["log_type"] == "LTE Control/PHY":
        src.enable_log(lte_lvl1 + lte_lvl3)
    elif plugin_config["log_type"] == "LTE Control/Data/PHY":
        src.enable_log(lte_lvl1 + lte_lvl2 + lte_lvl3)
    elif plugin_config["log_type"] == "LTE/3G Control Plane":
        src.enable_log(lte_lvl1 + wcdma + umts)
    elif plugin_config["log_type"] == "All":
        # src.enable_log(lte_lvl1 + lte_lvl2 + lte_lvl3 + wcdma + umts)
        src.enable_log_all()
    elif plugin_config["log_type"] == "Read Config":
        cfg_path = os.path.join(
            mi2app_utils.get_mobileinsight_cfg_path(), cfg_file)
        try:
            cfg = open(cfg_path, 'r')
            lines = cfg.read().splitlines()
            for line in lines:
                if line.rstrip('\n'):
                    if '#' in line:
                        continue
                    else:
                        src.enable_log(line)
            cfg.close()
        except IOError:
            src.enable_log(lte_lvl1 + wcdma + umts)
            src.log_warning(
                "NetLogger2: config file open failed, use default LTE/3G Control Plane logs")
            shutil.copyfile(
                os.path.join(
                    mi2app_utils.get_files_dir(),
                    "app/NetLogger/%s" %
                    cfg_file),
                cfg_path)
            src.log_info(
                "NetLogger2: config file copied to %s, you can edit it for collection next time" %
                cfg_path)

    loggingAnalyzer = LoggingAnalyzer(plugin_config)
    loggingAnalyzer.set_source(src)

    src.run()

except BaseException:
    from kivy.logger import Logger
    import traceback
    Logger.exception(traceback.format_exc())

#finally:
#    mi2app_utils.detach_thread()
